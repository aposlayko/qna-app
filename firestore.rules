rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth.uid != null;
    }

    function belongsToUserGet() {
      return resource.data.userId == request.auth.uid;
    }

    function belongsToUserUpdate() {
      return request.resource.data.userId == request.auth.uid;
    }

    function isNonEmptyString(fieldName) {
      return request.resource.data[fieldName] is string &&
             request.resource.data[fieldName].size() > 0;
    }

    function isValidCategory() {
      return isNonEmptyString('name') &&
             request.resource.data.userId == request.auth.uid;
    }

    function isValidQuestion() {
      return isNonEmptyString('answer') &&
             isNonEmptyString('title') &&
             isNonEmptyString('categoryId') &&
             exists(/databases/$(database)/documents/category/$(request.resource.data.categoryId)) &&
             request.resource.data.userId == request.auth.uid;

    }

    match /category/{catId} {
      allow read: if isAuthenticated() && belongsToUserGet();
      allow create, update: if isAuthenticated() && isValidCategory();
      allow delete: if isAuthenticated() && belongsToUserGet();
    }

    match /questions/{qId} {
      allow get: if isAuthenticated() && belongsToUserGet();
      allow create: if isAuthenticated() && isValidQuestion() && belongsToUserUpdate();
      allow update:  if isAuthenticated() && isValidQuestion() && belongsToUserUpdate();
      allow delete: if isAuthenticated() && belongsToUserGet();
      // TODO: belongsToUserGet is not working
      allow list: if isAuthenticated();
    }
  }
}
